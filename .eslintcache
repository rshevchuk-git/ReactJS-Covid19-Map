[{"/Users/roman/Desktop/covid19-tracker/src/Map.js":"1","/Users/roman/Desktop/covid19-tracker/src/LineGraph.js":"2","/Users/roman/Desktop/covid19-tracker/src/App.js":"3","/Users/roman/Desktop/covid19-tracker/src/Table.js":"4","/Users/roman/Desktop/covid19-tracker/src/utils.js":"5","/Users/roman/Desktop/covid19-tracker/src/index.js":"6"},{"size":963,"mtime":1608316891678,"results":"7","hashOfConfig":"8"},{"size":2509,"mtime":1608375273532,"results":"9","hashOfConfig":"8"},{"size":5544,"mtime":1608381821603,"results":"10","hashOfConfig":"8"},{"size":582,"mtime":1608319474548,"results":"11","hashOfConfig":"8"},{"size":1997,"mtime":1608376525442,"results":"12","hashOfConfig":"8"},{"size":375,"mtime":1608311631408,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1fy8p1v",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/roman/Desktop/covid19-tracker/src/Map.js",[],["28","29"],"/Users/roman/Desktop/covid19-tracker/src/LineGraph.js",[],"/Users/roman/Desktop/covid19-tracker/src/App.js",["30"],"import {Card, CardContent, makeStyles, TextField} from \"@material-ui/core\";\nimport {Autocomplete} from \"@material-ui/lab\";\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\nimport {useEffect, useState} from \"react\";\nimport \"./App.css\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport {prettyPrintStat, sortData} from \"./utils\";\n\nconst useStyles = makeStyles(() => ({\n  inputRoot: {\n    color: \"#cc1034\",\n    fontWeight: \"bold\",\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"rgba(118, 118, 118, 0.3)\",\n    },\n    \"&:hover .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"rgba(118, 118, 118, 0.3);\",\n    },\n    \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"rgba(118, 118, 118, 0.3)\",\n      borderWidth: 1,\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapProps, setMapProps] = useState({\n    position: {lat: 28.80746, lng: 18.4796},\n    zoom: 2,\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then((response) => response.json())\n        .then((data) => setCountryInfo(data));\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event, country) => {\n    const countryCode = country?.value;\n\n    console.log(countryCode);\n\n    const url =\n      !countryCode || countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setSelectedCountry(countryCode);\n        setCountryInfo(data);\n\n        countryCode && countryCode !== \"worldwide\"\n          ? setMapProps({\n              position: [data.countryInfo.lat, data.countryInfo.long],\n              zoom: 5,\n            })\n          : setMapProps({position: {lat: 28.80746, lng: 18.4796}, zoom: 2});\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>\n            C<img src=\"logo.png\" className=\"app__logo\" alt=\"logo\" />\n            VID-19 TRACKER\n          </h1>\n\n          <Autocomplete\n            id=\"combo-box-demo\"\n            classes={classes}\n            size=\"small\"\n            options={countries}\n            getOptionLabel={(country) => country.name || \"\"}\n            onChange={onCountryChange}\n            // value={selectedCountry}\n            style={{\n              backgroundColor: \"#fff\",\n            }}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Select country\"\n                variant=\"outlined\"\n              />\n            )}\n          />\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            textColor=\"red\"\n            active={casesType === \"cases\" ? casesType : false}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0,0\")}\n          ></InfoBox>\n          <InfoBox\n            textColor=\"green\"\n            active={casesType === \"recovered\" ? casesType : false}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recoveries\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0,0\")}\n          ></InfoBox>\n          <InfoBox\n            textColor=\"black\"\n            active={casesType === \"deaths\" ? casesType : false}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0,0\")}\n          ></InfoBox>\n        </div>\n\n        <div className=\"app__map\">\n          <Map\n            location={mapProps}\n            countries={mapCountries}\n            casesType={casesType}\n            setCountryInfo={setCountryInfo}\n          />\n        </div>\n      </div>\n      <Card className=\"card\">\n        <CardContent className=\"app__right\">\n          <div className=\"app__right__table\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n          </div>\n          <div>\n            <h3>Worldwide new {casesType}</h3>\n            <div className=\"app_right__chart\">\n              <LineGraph casesType={casesType} />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/roman/Desktop/covid19-tracker/src/Table.js",[],"/Users/roman/Desktop/covid19-tracker/src/utils.js",[],"/Users/roman/Desktop/covid19-tracker/src/index.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":33,"column":10,"nodeType":"37","messageId":"38","endLine":33,"endColumn":25},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'selectedCountry' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]